# v0.1
name: Module deployment
on:
  workflow_dispatch:
    inputs:
      blobUrl: 
        description: 'Artifact download url'
        required: true
      artifactVersion: 
        description: 'Full artifact build number'
        required: true
      moduleId:
        description: 'Module Id'
        required: true
      appDescriptionRepo:
        description: 'ArgoCd repository'
        required: true
        default: 'VirtoCommerce/vc-webstore-deploy'
      appDescriptionBranch:
        description: 'ArgoCd branch'
        required: true
        default: 'dev'


jobs:
  cd:
    runs-on: ubuntu-latest
    steps: 
    
    - name: Start deployment
      uses: bobheadxi/deployments@master
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: Development
        no_override: false

    - name: Checkout ArgoCD repository 
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: "${{ github.event.inputs.appDescriptionRepo }}"
        ref: "${{ github.event.inputs.appDescriptionBranch }}"

    - name: Update deployment-cm
      uses: VirtoCommerce/vc-github-actions/create-deploy-pr@VDS-1269
      with:
        deployRepo: "vc-webstore-deploy"
        deployBranch: "dev"
        artifactKey: ${{ github.event.inputs.moduleId }}
        artifactUrl: ${{ github.event.inputs.blobUrl }}
        taskNumber: ""
        forceCommit: "true"

    - name: Wait for environment is up
      shell: pwsh
      timeout-minutes: 15
      run: | 
        do {
          Start-Sleep -s 15
          $statusBage = (Invoke-WebRequest -Uri "https://argo.govirto.com/api/badge?name=webstore-dev").Content
          
          $syncedAndHealthy = $statusBage.Contains('>Healthy<') -and $statusBage.Contains('>Synced<')
          if (-not $syncedAndHealthy) {
            Write-Host "Sync pending..."
          }
        }
        while (-not $syncedAndHealthy)
   
    - name: BUILD_STATE::successful
      if: success()
      run: echo "BUILD_STATE=successful" >> $GITHUB_ENV

    - name: BUILD_STATE::failed
      if: failure()
      run: echo "BUILD_STATE=failed"  >> $GITHUB_ENV

    - name: Update GitHub deployment status
      uses: bobheadxi/deployments@master
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
